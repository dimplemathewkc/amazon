{"ast":null,"code":"// context api and redux are not the same thing but they use the same pattern of stpring the data globally \nexport const initialState = {\n  basket: []\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'ADD_TO_BASKET':\n      return { ...state,\n        basket: [...state.basket, action.item]\n      };\n\n    case 'REMOVE_FROM_BASKET':\n      const index = state.basket.findIndex(basketItem => basketItem.id === action.id);\n      let newBasket = [...state.basket];\n\n      if (index > 0) {\n        newBasket.splice(index, 1);\n      } else {\n        console.warn(`Can't remove the product (id: ${action.id}) as it is not in the basket`);\n      }\n\n      return { ...state,\n        basket: newBasket\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/dimplemathew/Desktop/react-projects/amazon-clone/amazon-clone/src/reducer.js"],"names":["initialState","basket","reducer","state","action","type","item","index","findIndex","basketItem","id","newBasket","splice","console","warn"],"mappings":"AAAA;AACA,OAAO,MAAMA,YAAY,GAAG;AACxBC,EAAAA,MAAM,EAAE;AADgB,CAArB;;AAIP,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAE/B,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,eAAL;AACI,aAAO,EACH,GAAGF,KADA;AAEHF,QAAAA,MAAM,EAAC,CAAC,GAAGE,KAAK,CAACF,MAAV,EAAkBG,MAAM,CAACE,IAAzB;AAFJ,OAAP;;AAIJ,SAAK,oBAAL;AACI,YAAMC,KAAK,GAAGJ,KAAK,CAACF,MAAN,CAAaO,SAAb,CACVC,UAAU,IAAIA,UAAU,CAACC,EAAX,KAAkBN,MAAM,CAACM,EAD7B,CAAd;AAGA,UAAIC,SAAS,GAAG,CAAC,GAAGR,KAAK,CAACF,MAAV,CAAhB;;AACA,UAAGM,KAAK,GAAG,CAAX,EAAa;AACTI,QAAAA,SAAS,CAACC,MAAV,CAAiBL,KAAjB,EAAwB,CAAxB;AACH,OAFD,MAEM;AACFM,QAAAA,OAAO,CAACC,IAAR,CAAc,iCAAgCV,MAAM,CAACM,EAAG,8BAAxD;AACH;;AACD,aAAO,EACH,GAAGP,KADA;AAEHF,QAAAA,MAAM,EAAEU;AAFL,OAAP;;AAIJ;AACI,aAAOR,KAAP;AArBR;AAuBH,CAzBD;;AA0BA,eAAeD,OAAf","sourcesContent":["// context api and redux are not the same thing but they use the same pattern of stpring the data globally \nexport const initialState = {\n    basket: [],\n}\n\nconst reducer = (state, action) => {\n\n    switch(action.type){\n        case 'ADD_TO_BASKET':\n            return {\n                ...state,\n                basket:[...state.basket, action.item],\n            };\n        case 'REMOVE_FROM_BASKET':\n            const index = state.basket.findIndex(\n                basketItem => basketItem.id === action.id\n            );\n            let newBasket = [...state.basket]\n            if(index > 0){\n                newBasket.splice(index, 1);\n            } else{\n                console.warn(`Can't remove the product (id: ${action.id}) as it is not in the basket`)\n            }\n            return {\n                ...state,\n                basket: newBasket\n            }\n        default:\n            return state;\n    }\n};\nexport default reducer"]},"metadata":{},"sourceType":"module"}