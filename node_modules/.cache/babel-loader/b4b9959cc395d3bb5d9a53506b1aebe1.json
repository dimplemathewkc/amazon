{"ast":null,"code":"// context api and redux are not the same thing but they use the same pattern of stpring the data globally \nexport const initialState = {\n  basket: []\n}; // Selector\n\nexport const getBasketTotal = basket => basket === null || basket === void 0 ? void 0 : basket.reduce((amount, item) => item.price + amount, 0);\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'ADD_TO_BASKET':\n      return { ...state,\n        basket: [...state.basket, action.item]\n      };\n\n    case 'REMOVE_FROM_BASKET':\n      console.log(action);\n      console.log(action.item.id);\n      const index = state.basket.findIndex(basketItem => basketItem.id === action.item.id);\n      console.log(index);\n      let newBasket = [...state.basket];\n\n      if (index >= 0) {\n        newBasket.splice(index, 1);\n      } else {\n        console.warn(`Can't remove the product (id: ${action.id}) as it is not in the basket`);\n      }\n\n      return { ...state,\n        basket: newBasket\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/dimplemathew/Desktop/react-projects/amazon-clone/amazon-clone/src/reducer.js"],"names":["initialState","basket","getBasketTotal","reduce","amount","item","price","reducer","state","action","type","console","log","id","index","findIndex","basketItem","newBasket","splice","warn"],"mappings":"AAAA;AACA,OAAO,MAAMA,YAAY,GAAG;AACxBC,EAAAA,MAAM,EAAE;AADgB,CAArB,C,CAGP;;AACA,OAAO,MAAMC,cAAc,GAAID,MAAD,IAC5BA,MAD4B,aAC5BA,MAD4B,uBAC5BA,MAAM,CAAEE,MAAR,CAAe,CAACC,MAAD,EAASC,IAAT,KAAkBA,IAAI,CAACC,KAAL,GAAaF,MAA9C,EAAsD,CAAtD,CADK;;AAEP,MAAMG,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAE/B,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,eAAL;AACI,aAAO,EACH,GAAGF,KADA;AAEHP,QAAAA,MAAM,EAAC,CAAC,GAAGO,KAAK,CAACP,MAAV,EAAkBQ,MAAM,CAACJ,IAAzB;AAFJ,OAAP;;AAIJ,SAAK,oBAAL;AACIM,MAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYH,MAAM,CAACJ,IAAP,CAAYQ,EAAxB;AACA,YAAMC,KAAK,GAAGN,KAAK,CAACP,MAAN,CAAac,SAAb,CACbC,UAAD,IAAgBA,UAAU,CAACH,EAAX,KAAkBJ,MAAM,CAACJ,IAAP,CAAYQ,EADhC,CAAd;AAGAF,MAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACA,UAAIG,SAAS,GAAG,CAAC,GAAGT,KAAK,CAACP,MAAV,CAAhB;;AACA,UAAGa,KAAK,IAAI,CAAZ,EAAc;AACVG,QAAAA,SAAS,CAACC,MAAV,CAAiBJ,KAAjB,EAAwB,CAAxB;AACH,OAFD,MAEM;AACFH,QAAAA,OAAO,CAACQ,IAAR,CAAc,iCAAgCV,MAAM,CAACI,EAAG,8BAAxD;AACH;;AACD,aAAO,EACH,GAAGL,KADA;AAEHP,QAAAA,MAAM,EAAEgB;AAFL,OAAP;;AAIJ;AACI,aAAOT,KAAP;AAxBR;AA0BH,CA5BD;;AA6BA,eAAeD,OAAf","sourcesContent":["// context api and redux are not the same thing but they use the same pattern of stpring the data globally \nexport const initialState = {\n    basket: [],\n}\n// Selector\nexport const getBasketTotal = (basket) => \n  basket?.reduce((amount, item) => item.price + amount, 0);\nconst reducer = (state, action) => {\n    \n    switch(action.type){\n        case 'ADD_TO_BASKET':\n            return {\n                ...state,\n                basket:[...state.basket, action.item],\n            };\n        case 'REMOVE_FROM_BASKET':\n            console.log(action)\n            console.log(action.item.id)\n            const index = state.basket.findIndex(\n            (basketItem) => basketItem.id === action.item.id\n        );\n            console.log(index)\n            let newBasket = [...state.basket]\n            if(index >= 0){\n                newBasket.splice(index, 1);\n            } else{\n                console.warn(`Can't remove the product (id: ${action.id}) as it is not in the basket`)\n            }\n            return {\n                ...state,\n                basket: newBasket\n            }\n        default:\n            return state;\n    }\n};\nexport default reducer"]},"metadata":{},"sourceType":"module"}